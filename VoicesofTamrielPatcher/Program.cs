using Mutagen.Bethesda;
using Mutagen.Bethesda.Synthesis;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda.WPF.Reflection.Attributes;

namespace VoicesofTamrielPatcher
{
    public class PatcherSettings
    {
        [Tooltip("When enabled, unique NPCs will not have their voices changed to preserve their identity")]
        [SettingName("Skip Unique NPCs")]
        public bool SkipUniqueNpcs { get; set; } = true;

        [Tooltip("When enabled, VOT voices are randomly applied based on the chance percentage. When disabled, all matching NPCs get VOT voices.")]
        [SettingName("Use Randomization")]
        public bool UseRandomization { get; set; } = true;

        [Tooltip("The percentage chance (0-100) that a matching NPC will receive a VOT voice when randomization is enabled")]
        [SettingName("Randomization Chance (%)")]
        public int RandomizationChance { get; set; } = 50;
    }

    public class Program
    {
        static Lazy<PatcherSettings> Settings = null!;
        public static async Task<int> Main(string[] args)
        {
            return await SynthesisPipeline.Instance
                .AddPatch<ISkyrimMod, ISkyrimModGetter>(RunPatch)
                .SetAutogeneratedSettings(
                    nickname: "Settings",
                    path: "settings.json",
                    out Settings)
                .SetTypicalOpen(GameRelease.SkyrimSE, "vot_patcher.esp")
                .Run(args);
        }

        private static void RunPatch(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            // --- Configuration ---
            // A dictionary that maps a source voice to a list of potential target voices.
            // Key: The EditorID of the voice type you want to find and replace.
            // Value: A list of EditorIDs for the voices you want to randomly assign for that key.
            var voiceMappings = new Dictionary<string, List<string>>(StringComparer.OrdinalIgnoreCase)
            {
                // Male voices
                { "MaleCommoner", new List<string> { "VOT_MaleCommoner01" } },
                { "MaleDarkElf", new List<string> { "VOT_MaleDarkElf01" } },
                { "MaleBrute", new List<string> { "VOT_MaleBrute01" }},
                // { "MaleCommonerAccented", new List<string> { "VOT_MaleCommonerAccented01", "VOT_MaleCommonerAccented02" } },
                // { "MaleKhajiit", new List<string> { "VOT_MaleKhajiit01" } },
                // { "MaleArgonian", new List<string> { "VOT_MaleArgonian01" } },
                // { "MaleOrc", new List<string> { "VOT_MaleOrc01", "VOT_MaleOrc02" } },
                // { "MaleNord", new List<string> { "VOT_MaleNord01", "VOT_MaleNord02" } },
                // { "MaleBandit", new List<string> { "VOT_MaleBandit01", "VOT_MaleBandit02" } },
                // Female voices
                // { "FemaleCommoner", new List<string> { "VOT_FemaleCommoner01", "VOT_FemaleCommoner02" } },
                // { "FemaleArgonian", new List<string> { "VOT_FemaleArgonian01" } },
                { "FemaleNord", new List<string> { "VOT_FemaleNord02" } },
                { "FemaleDarkElf", new List<string> { "VOT_FemaleDarkElf01" } },
                // { "FemaleBandit", new List<string> { "VOT_FemaleBandit01", "VOT_FemaleBandit02" } },
                // { "FemaleKhajiit", new List<string> { "VOT_FemaleKhajiit01"} },
                // { "FemaleOrc", new List<string> { "VOT_FemaleOrc01", "VOT_FemaleOrc02" } },
                // Add more mappings here as needed
            };
            // --- End of Configuration ---

            var random = new Random();
            int patchedNpcCount = 0;
            int keptNpcCount = 0;

            // Step 1: Resolve all target voice strings into actual voice records upfront.
            var resolvedVoiceMappings = new Dictionary<string, List<IVoiceTypeGetter>>(StringComparer.OrdinalIgnoreCase);
            
            Console.WriteLine("Resolving voice mappings...");
            foreach (var mapping in voiceMappings)
            {
                var sourceVoice = mapping.Key;
                var targetVoices = mapping.Value;
                var resolvedTargets = new List<IVoiceTypeGetter>();

                foreach (var targetEditorId in targetVoices)
                {
                    if (state.LinkCache.TryResolve<IVoiceTypeGetter>(targetEditorId, out var voice))
                    {
                        resolvedTargets.Add(voice);
                    }
                    else
                    {
                        Console.WriteLine($" -> WARNING: For source '{sourceVoice}', could not find target '{targetEditorId}'. It will be skipped.");
                    }
                }

                if (resolvedTargets.Any())
                {
                    resolvedVoiceMappings[sourceVoice] = resolvedTargets;
                    Console.WriteLine($" -> Mapping for '{sourceVoice}' successfully resolved with {resolvedTargets.Count} target(s).");
                }
                else
                {
                    Console.WriteLine($" -> WARNING: No valid target voices found for source '{sourceVoice}'. It will be skipped entirely.");
                }
            }
            
            Console.WriteLine("\nProcessing NPCs...");

            // Step 2: Iterate through all NPCs and apply the mappings.
            foreach (var npc in state.LoadOrder.PriorityOrder.Npc().WinningOverrides())
            {
                if (npc.Voice.IsNull) continue;
                
                // Skip NPCs with the Unique flag (if enabled in settings)
                if (Settings.Value.SkipUniqueNpcs && npc.Configuration.Flags.HasFlag(NpcConfiguration.Flag.Unique))
                {
                    continue;
                }
                
                // // Skip NPCs from DLCs (Dawnguard, Hearthfire, Dragonborn)
                // if (npc.FormKey.ModKey.ToString().StartsWith("Dawnguard", StringComparison.OrdinalIgnoreCase) ||
                //     npc.FormKey.ModKey.ToString().StartsWith("HearthFires", StringComparison.OrdinalIgnoreCase) ||
                //     npc.FormKey.ModKey.ToString().StartsWith("Dragonborn", StringComparison.OrdinalIgnoreCase))
                // {
                //     continue;
                // }
                
                // Skip Creation Club content (EditorID starts with "cc" or "DLC")
                if (npc.EditorID != null && 
                    (npc.EditorID.StartsWith("cc", StringComparison.OrdinalIgnoreCase) ||
                     npc.EditorID.StartsWith("DLC", StringComparison.OrdinalIgnoreCase)))
                {
                    continue;
                }

                if (state.LinkCache.TryResolve<IVoiceTypeGetter>(npc.Voice.FormKey, out var currentVoice))
                {
                    // Check if the NPC's current voice is one of our source voices (a key in our dictionary).
                    if (currentVoice.EditorID != null && resolvedVoiceMappings.TryGetValue(currentVoice.EditorID, out var availableTargets))
                    {
                        bool shouldApplyVoice = false;
                        IVoiceTypeGetter targetVoice;

                        if (!Settings.Value.UseRandomization)
                        {
                            // No randomization - always apply first available VOT voice
                            shouldApplyVoice = true;
                            targetVoice = availableTargets[0];
                        }
                        else
                        {
                            // Use randomization with configurable chance
                            int roll = random.Next(0, 100);
                            if (roll < Settings.Value.RandomizationChance)
                            {
                                shouldApplyVoice = true;
                                // Randomly select from available targets
                                targetVoice = availableTargets[random.Next(availableTargets.Count)];
                            }
                            else
                            {
                                targetVoice = null!;
                            }
                        }

                        if (shouldApplyVoice && targetVoice != null)
                        {
                            var npcOverride = state.PatchMod.Npcs.GetOrAddAsOverride(npc);
                            npcOverride.Voice.SetTo(targetVoice);
                            patchedNpcCount++;
                        }
                        else
                        {
                            keptNpcCount++;
                        }
                    }
                }
            }
            
            // Step 3: Print the final summary.
            Console.WriteLine("\n--- Voice Patcher Summary ---");
            Console.WriteLine($"Total NPCs patched: {patchedNpcCount}");
            Console.WriteLine($"Total NPCs kept with original voice: {keptNpcCount}");
            Console.WriteLine("-----------------------------");
        }
    }
}
