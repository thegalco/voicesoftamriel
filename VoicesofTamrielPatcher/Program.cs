using Mutagen.Bethesda;
using Mutagen.Bethesda.Synthesis;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda.WPF.Reflection.Attributes;

namespace VoicesofTamrielPatcher
{
    public class PatcherSettings
    {
        [Tooltip("When enabled, unique NPCs will not have their voices changed to preserve their identity")]
        [SettingName("Skip Unique NPCs")]
        public bool SkipUniqueNpcs { get; set; } = true;

        [Tooltip("When enabled, VOT voices are randomly applied based on the chance percentage. When disabled, all matching NPCs get VOT voices.")]
        [SettingName("Use Randomization")]
        public bool UseRandomization { get; set; } = true;

        [Tooltip("The percentage chance (0-100) that a matching NPC will receive a VOT voice when randomization is enabled")]
        [SettingName("Randomization Chance (%)")]
        public int RandomizationChance { get; set; } = 50;

        [Tooltip("When enabled, automatically patches supported mods to work with VOT voices")]
        [SettingName("Patch Supported Mods (Do not disable unless you know what you're doing)")]
        public bool PatchSupportedMods { get; set; } = true;
    }

    public class Program
    {
        static Lazy<PatcherSettings> Settings = null!;
        public static async Task<int> Main(string[] args)
        {
            return await SynthesisPipeline.Instance
                .AddPatch<ISkyrimMod, ISkyrimModGetter>(RunPatch)
                .SetAutogeneratedSettings(
                    nickname: "Settings",
                    path: "settings.json",
                    out Settings)
                .SetTypicalOpen(GameRelease.SkyrimSE, "vot_patcher.esp")
                .Run(args);
        }

        private static void RunPatch(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            // --- Configuration ---
            // A dictionary that maps a source voice to a list of potential target voices.
            // Key: The EditorID of the voice type you want to find and replace.
            // Value: A list of EditorIDs for the voices you want to randomly assign for that key.
            var voiceMappings = new Dictionary<string, List<string>>(StringComparer.OrdinalIgnoreCase)
            {
                // Male voices
                { "MaleCommoner", new List<string> { "VOT_MaleCommoner01" } },
                { "MaleCommonerAccented", new List<string> { "VOT_MaleCommonerAccented01" } },
                { "MaleDarkElf", new List<string> { "VOT_MaleDarkElf01" } },
                { "MaleBrute", new List<string> { "VOT_MaleBrute01" }},
                { "MaleEvenToned", new List<string> { "VOT_MaleEventoned01" } },
                { "MaleEvenTonedAccented", new List<string> { "VOT_MaleEventonedAccented01" } },
                { "FemaleNord", new List<string> { "VOT_FemaleNord02" } },
                { "FemaleDarkElf", new List<string> { "VOT_FemaleDarkElf01" } }
            };
            // --- End of Configuration ---

            var random = new Random();
            int patchedNpcCount = 0;
            int keptNpcCount = 0;

            // Step 1: Resolve all target voice strings into actual voice records upfront.
            var resolvedVoiceMappings = new Dictionary<string, List<IVoiceTypeGetter>>(StringComparer.OrdinalIgnoreCase);
            
            Console.WriteLine("Resolving voice mappings...");
            foreach (var mapping in voiceMappings)
            {
                var sourceVoice = mapping.Key;
                var targetVoices = mapping.Value;
                var resolvedTargets = new List<IVoiceTypeGetter>();

                foreach (var targetEditorId in targetVoices)
                {
                    if (state.LinkCache.TryResolve<IVoiceTypeGetter>(targetEditorId, out var voice))
                    {
                        resolvedTargets.Add(voice);
                    }
                    else
                    {
                        Console.WriteLine($" -> WARNING: For source '{sourceVoice}', could not find target '{targetEditorId}'. It will be skipped.");
                    }
                }

                if (resolvedTargets.Any())
                {
                    resolvedVoiceMappings[sourceVoice] = resolvedTargets;
                    Console.WriteLine($" -> Mapping for '{sourceVoice}' successfully resolved with {resolvedTargets.Count} target(s).");
                }
                else
                {
                    Console.WriteLine($" -> WARNING: No valid target voices found for source '{sourceVoice}'. It will be skipped entirely.");
                }
            }
            
            Console.WriteLine("\nProcessing NPCs...");

            // Step 2: Iterate through all NPCs and apply the mappings.
            foreach (var npc in state.LoadOrder.PriorityOrder.Npc().WinningOverrides())
            {
                if (npc.Voice.IsNull) continue;
                
                // Skip NPCs with the Unique flag (if enabled in settings)
                if (Settings.Value.SkipUniqueNpcs && npc.Configuration.Flags.HasFlag(NpcConfiguration.Flag.Unique))
                {
                    continue;
                }
                
                // Skip Creation Club content (EditorID starts with "cc" or "DLC")
                if (npc.EditorID != null && 
                    (npc.EditorID.StartsWith("cc", StringComparison.OrdinalIgnoreCase) ||
                     npc.EditorID.StartsWith("DLC", StringComparison.OrdinalIgnoreCase)))
                {
                    continue;
                }

                if (state.LinkCache.TryResolve<IVoiceTypeGetter>(npc.Voice.FormKey, out var currentVoice))
                {
                    // Check if the NPC's current voice is one of our source voices (a key in our dictionary).
                    if (currentVoice.EditorID != null && resolvedVoiceMappings.TryGetValue(currentVoice.EditorID, out var availableTargets))
                    {
                        bool shouldApplyVoice = false;
                        IVoiceTypeGetter targetVoice;

                        if (!Settings.Value.UseRandomization)
                        {
                            // No randomization - always apply first available VOT voice
                            shouldApplyVoice = true;
                            targetVoice = availableTargets[0];
                        }
                        else
                        {
                            // Use randomization with configurable chance
                            int roll = random.Next(0, 100);
                            if (roll < Settings.Value.RandomizationChance)
                            {
                                shouldApplyVoice = true;
                                // Randomly select from available targets
                                targetVoice = availableTargets[random.Next(availableTargets.Count)];
                            }
                            else
                            {
                                targetVoice = null!;
                            }
                        }

                        if (shouldApplyVoice && targetVoice != null)
                        {
                            var npcOverride = state.PatchMod.Npcs.GetOrAddAsOverride(npc);
                            npcOverride.Voice.SetTo(targetVoice);
                            patchedNpcCount++;
                        }
                        else
                        {
                            keptNpcCount++;
                        }
                    }
                }
            }
            
            // Step 3: Patch supported mods if enabled
            if (Settings.Value.PatchSupportedMods)
            {
                Console.WriteLine("\nChecking for supported mods to patch...");
                PatchLinesExpansions(state, resolvedVoiceMappings);
            }
            
            // Step 4: Print the final summary.
            Console.WriteLine("\n--- Voice Patcher Summary ---");
            Console.WriteLine($"Total NPCs patched: {patchedNpcCount}");
            Console.WriteLine($"Total NPCs kept with original voice: {keptNpcCount}");
            Console.WriteLine("-----------------------------");
        }

        private static bool IsModInLoadOrder(IPatcherState<ISkyrimMod, ISkyrimModGetter> state, string modName)
        {
            return state.LoadOrder.Any(mod => 
                string.Equals(mod.Value.ModKey.FileName.String, modName, StringComparison.OrdinalIgnoreCase));
        }

        private static void PatchLinesExpansions(
            IPatcherState<ISkyrimMod, ISkyrimModGetter> state, 
            Dictionary<string, List<IVoiceTypeGetter>> resolvedVoiceMappings)
        {
            // Array of supported mods to patch
            string[] supportedMods = new[] 
            {
                "Bandit Lines Expansion.esp",
                "DarkElfVoicesForBandits.esp",
                "Civil War Lines Expansion.esp",
                "Brawl Lines Expansion.esp",
                "Vampire Lines Expansion.esp",
                "Forsworn and Thalmor Lines Expansion.esp"
            };
            
            var modsToProcess = supportedMods.Where(mod => IsModInLoadOrder(state, mod)).ToList();
            
            if (!modsToProcess.Any())
            {
                Console.WriteLine(" -> No supported mods found in load order. Skipping dialog patching.");
                return;
            }
            
            Console.WriteLine($" -> Found {modsToProcess.Count} supported mod(s) to patch: {string.Join(", ", modsToProcess)}");

            foreach (var dialogTopic in state.LoadOrder.PriorityOrder.DialogTopic().WinningOverrides())
            {
                // Check if this dialog topic belongs to any of the mods we're processing
                if (modsToProcess.Any(mod => dialogTopic.FormKey.ModKey.FileName.String.Equals(mod, StringComparison.OrdinalIgnoreCase)))
                {
                    bool topicModified = false;
                    DialogTopic? topicOverride = null;
                    
                    int responseIndex = 0;
                    foreach (var response in dialogTopic.Responses)
                    {
                        bool responseNeedsPatching = false;
                        List<(IConditionGetter condition, string voiceEditorId, List<IVoiceTypeGetter> votVoices)> conditionsToPatch = new();
                        
                        // First pass: identify conditions that need patching
                        foreach (var condition in response.Conditions)
                        {
                            if (condition.Data is IGetIsVoiceTypeConditionDataGetter voiceCondition)
                            {
                                // Try to resolve the voice type being checked
                                if (state.LinkCache.TryResolve<IVoiceTypeGetter>(voiceCondition.VoiceTypeOrList.Link.FormKey, out var checkedVoice) && 
                                    checkedVoice.EditorID != null)
                                {
                                    if (resolvedVoiceMappings.TryGetValue(checkedVoice.EditorID, out var votVoices))
                                    {
                                        // This condition checks for a voice type we're patching - store ALL VOT voices
                                        conditionsToPatch.Add((condition, checkedVoice.EditorID, votVoices));
                                        responseNeedsPatching = true;
                                    }
                                }
                            }
                        }
                        
                        // Second pass: add VOT voice conditions if needed
                        if (responseNeedsPatching)
                        {
                            if (!topicModified)
                            {
                                topicOverride = state.PatchMod.DialogTopics.GetOrAddAsOverride(dialogTopic);
                                topicModified = true;
                                
                                // GetOrAddAsOverride creates an empty override, so we need to copy the responses
                                if (topicOverride.Responses.Count == 0 && dialogTopic.Responses.Count > 0)
                                {
                                    foreach (var resp in dialogTopic.Responses)
                                    {
                                        topicOverride.Responses.Add(resp.DeepCopy());
                                    }
                                }
                            }
                            
                            // Get the response to modify from our override
                            if (responseIndex < topicOverride!.Responses.Count)
                            {
                                var responseToModify = topicOverride.Responses[responseIndex];
                                
                                // Add new conditions for ALL VOT voice variants
                                foreach (var (originalCondition, voiceEditorId, votVoices) in conditionsToPatch)
                                {
                                    int insertIndex = -1;
                                    for (int i = responseToModify.Conditions.Count - 1; i >= 0; i--)
                                    {
                                        if (responseToModify.Conditions[i].Data is IGetIsVoiceTypeConditionDataGetter vc)
                                        {
                                            if (state.LinkCache.TryResolve<IVoiceTypeGetter>(vc.VoiceTypeOrList.Link.FormKey, out var v) &&
                                                v.EditorID == voiceEditorId)
                                            {
                                                insertIndex = i + 1;
                                                break;
                                            }
                                        }
                                    }
                                    
                                    if (insertIndex >= 0)
                                    {
                                        foreach (var votVoice in votVoices)
                                        {
                                            var newCondition = new ConditionFloat();
                                            newCondition.CompareOperator = originalCondition.CompareOperator;
                                            newCondition.Flags = originalCondition.Flags | Condition.Flag.OR;
                                            newCondition.ComparisonValue = 1.0f;
                                            
                                            // Set up the GetIsVoiceType condition data
                                            var voiceConditionData = new GetIsVoiceTypeConditionData();
                                            voiceConditionData.VoiceTypeOrList.Link.SetTo(votVoice);
                                            voiceConditionData.RunOnType = (originalCondition.Data as IGetIsVoiceTypeConditionDataGetter)?.RunOnType ?? Condition.RunOnType.Subject;
                                            newCondition.Data = voiceConditionData;
                                            
                                            responseToModify.Conditions.Insert(insertIndex, newCondition);
                                            insertIndex++;
                                        }
                                    }
                                    else
                                    {
                                        Console.WriteLine($"   -> WARNING: Could not find original condition for {voiceEditorId} in response");
                                    }
                                }
                            }
                            else
                            {
                                Console.WriteLine($"   -> WARNING: Response index {responseIndex} out of bounds for override with {topicOverride!.Responses.Count} responses");
                            }
                        }
                        
                        responseIndex++;
                    }
                }
            }
        }
    }
}
